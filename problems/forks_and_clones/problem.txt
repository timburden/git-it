  Fork a project from GitHub.com and clone it locally.
  
  --------------------------------------------------------------------

  Now you've made a project locally and pushed it to GitHub, but that's
  only half the fun. The other half is working with other people and
  projects.

  When you {bold}fork{/bold} a repository, you're creating a copy of it on 
  your GitHub.com account. Forks are used for creating your own
  version of a project or contributing back fixes or features to the
  original project. 
  
  Once a project is forked, you then {bold}clone{/bold} (aka copy) it from
  GitHub to your computer to work on locally.

  {bold}{cyan}
  Fork{/bold}
  ----{/cyan}

  The project we'll work with is {bold}www.github.com/jlord/patchwork{/bold}. Go
  to that site and click the fork button at the top right. Once the
  fork animation is complete, you've got a copy on your account. Copy 
  your fork's HTTP URL on the right side.
  
  {bold}{cyan}
  Clone a Repospitory{/bold}
  -------------------{/cyan}

  Now, in terminal, clone the repository. It will create a new folder
  for the repository so no need to create one. But make sure you aren't
  cloning it inside of another Git repository folder! So, if you're still
  inside of the repository you created in the early challenges, 
  back out of that folder: `cd ..`

  $ git clone <URL>

  Navigate into that folder (in this case, named 'patchwork')

  $ cd patchwork

  Now you've got a copy of the repository on your computer and it is
  automatically connected to the remote repository (your forked copy) 
  on your GitHub account.

  {bold}{cyan}
  Connect to the Original Repository{/bold}
  ----------------------------------{/cyan}

  But what if the original repository you forked changes? You'll want
  to be able to {bold}pull{/bold} in those changes too. So let's add a remote
  connection to the original, {bold}github.com/jlord/patchwork{/bold}, repository 
  with its URL, found on the right hand side of the original on GitHub.

  You can name this remote connection anything you want, but often
  people use 'upstream', let's use that for this.

  $ git remote add upstream https://github.com/jlord/patchwork.git
  
  When you've done these steps, run `git-it verify`.
  
  {cyan}
  **GIT TIPS**
  ------------

  {bold}Add remote connections{/bold}

  $ git remote add <REMOTENAME> <URL>
  
  {bold}View remote connections{/bold}

  $ git remote -v{/cyan}

  --------------------------------------------------------------------
